/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.tomohavvk.translator.kafka.events;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class EventMeta extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -8412779406546558839L;

    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
            "{\"type\":\"record\",\"name\":\"EventMeta\",\"namespace\":\"com.tomohavvk.translator.kafka.events\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"createdAt\",\"type\":\"string\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    }

    private static final BinaryMessageEncoder<EventMeta> ENCODER = new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<EventMeta> DECODER = new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<EventMeta> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<EventMeta> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver
     *            a {@link SchemaStore} used to find schemas by fingerprint
     *
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<EventMeta> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this EventMeta to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     *
     * @throws java.io.IOException
     *             if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a EventMeta from a ByteBuffer.
     *
     * @param b
     *            a byte buffer holding serialized data for an instance of this class
     *
     * @return a EventMeta instance decoded from the given buffer
     *
     * @throws java.io.IOException
     *             if the given bytes could not be deserialized into an instance of this class
     */
    public static EventMeta fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.util.UUID id;
    private java.lang.CharSequence createdAt;

    /**
     * Default constructor. Note that this does not initialize fields to their default values from the schema. If that
     * is desired then one should use <code>newBuilder()</code>.
     */
    public EventMeta() {
    }

    /**
     * All-args constructor.
     *
     * @param id
     *            The new value for id
     * @param createdAt
     *            The new value for createdAt
     */
    public EventMeta(java.util.UUID id, java.lang.CharSequence createdAt) {
        this.id = id;
        this.createdAt = createdAt;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
        case 0:
            return id;
        case 1:
            return createdAt;
        default:
            throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    private static final org.apache.avro.Conversion<?>[] conversions = new org.apache.avro.Conversion<?>[] {
            new org.apache.avro.Conversions.UUIDConversion(), null, null };

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader. Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
        case 0:
            id = (java.util.UUID) value$;
            break;
        case 1:
            createdAt = (java.lang.CharSequence) value$;
            break;
        default:
            throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'id' field.
     *
     * @return The value of the 'id' field.
     */
    public java.util.UUID getId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     *
     * @param value
     *            the value to set.
     */
    public void setId(java.util.UUID value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'createdAt' field.
     *
     * @return The value of the 'createdAt' field.
     */
    public java.lang.CharSequence getCreatedAt() {
        return createdAt;
    }

    /**
     * Sets the value of the 'createdAt' field.
     *
     * @param value
     *            the value to set.
     */
    public void setCreatedAt(java.lang.CharSequence value) {
        this.createdAt = value;
    }

    /**
     * Creates a new EventMeta RecordBuilder.
     *
     * @return A new EventMeta RecordBuilder
     */
    public static com.tomohavvk.translator.kafka.events.EventMeta.Builder newBuilder() {
        return new com.tomohavvk.translator.kafka.events.EventMeta.Builder();
    }

    /**
     * Creates a new EventMeta RecordBuilder by copying an existing Builder.
     *
     * @param other
     *            The existing builder to copy.
     *
     * @return A new EventMeta RecordBuilder
     */
    public static com.tomohavvk.translator.kafka.events.EventMeta.Builder newBuilder(
            com.tomohavvk.translator.kafka.events.EventMeta.Builder other) {
        if (other == null) {
            return new com.tomohavvk.translator.kafka.events.EventMeta.Builder();
        } else {
            return new com.tomohavvk.translator.kafka.events.EventMeta.Builder(other);
        }
    }

    /**
     * Creates a new EventMeta RecordBuilder by copying an existing EventMeta instance.
     *
     * @param other
     *            The existing instance to copy.
     *
     * @return A new EventMeta RecordBuilder
     */
    public static com.tomohavvk.translator.kafka.events.EventMeta.Builder newBuilder(
            com.tomohavvk.translator.kafka.events.EventMeta other) {
        if (other == null) {
            return new com.tomohavvk.translator.kafka.events.EventMeta.Builder();
        } else {
            return new com.tomohavvk.translator.kafka.events.EventMeta.Builder(other);
        }
    }

    /**
     * RecordBuilder for EventMeta instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventMeta>
            implements org.apache.avro.data.RecordBuilder<EventMeta> {

        private java.util.UUID id;
        private java.lang.CharSequence createdAt;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other
         *            The existing Builder to copy.
         */
        private Builder(com.tomohavvk.translator.kafka.events.EventMeta.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.createdAt)) {
                this.createdAt = data().deepCopy(fields()[1].schema(), other.createdAt);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
        }

        /**
         * Creates a Builder by copying an existing EventMeta instance
         *
         * @param other
         *            The existing instance to copy.
         */
        private Builder(com.tomohavvk.translator.kafka.events.EventMeta other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.createdAt)) {
                this.createdAt = data().deepCopy(fields()[1].schema(), other.createdAt);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Gets the value of the 'id' field.
         *
         * @return The value.
         */
        public java.util.UUID getId() {
            return id;
        }

        /**
         * Sets the value of the 'id' field.
         *
         * @param value
         *            The value of 'id'.
         *
         * @return This builder.
         */
        public com.tomohavvk.translator.kafka.events.EventMeta.Builder setId(java.util.UUID value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         *
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'id' field.
         *
         * @return This builder.
         */
        public com.tomohavvk.translator.kafka.events.EventMeta.Builder clearId() {
            id = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'createdAt' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getCreatedAt() {
            return createdAt;
        }

        /**
         * Sets the value of the 'createdAt' field.
         *
         * @param value
         *            The value of 'createdAt'.
         *
         * @return This builder.
         */
        public com.tomohavvk.translator.kafka.events.EventMeta.Builder setCreatedAt(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.createdAt = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'createdAt' field has been set.
         *
         * @return True if the 'createdAt' field has been set, false otherwise.
         */
        public boolean hasCreatedAt() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'createdAt' field.
         *
         * @return This builder.
         */
        public com.tomohavvk.translator.kafka.events.EventMeta.Builder clearCreatedAt() {
            createdAt = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public EventMeta build() {
            try {
                EventMeta record = new EventMeta();
                record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
                record.createdAt = fieldSetFlags()[1] ? this.createdAt
                        : (java.lang.CharSequence) defaultValue(fields()[1]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<EventMeta> WRITER$ = (org.apache.avro.io.DatumWriter<EventMeta>) MODEL$
            .createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<EventMeta> READER$ = (org.apache.avro.io.DatumReader<EventMeta>) MODEL$
            .createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
